int sort(const void* e1 ,const void* e2)     //需要用户自己根据所需交换元素的类型来进行书写
{
	return *(int*)e1 - *(int*)e2;
}
void swap(char* str1, char* str2,int width)   // 无论是什么类型，全部转化成 char*来进行计算，通过一个字节一个字节的交换，最终完成两个元素的交换
{
	int i = 0;
	for (i = 0; i < width; i++)
	{
		char tmp = 0;
		tmp = *str1;
		*str1 = *str2;
		*str2 = tmp;
		*str1++;
		*str2++;
	}
}
void my_qsort(void* base, int sz, int width, int (*pf)(const void* el, const void* e2))
{
	int i = 0;
	for (i = 0; i < sz -1; i++)    //比较趟数
	{
		int j = 0;
		{
			for (j = 0; j < sz - 1 - i; j++)   // 每个元素的比较次数
			{
				if (sort((char*)base + j * width, (char*)base + (j + 1) * width) > 0)  // 如果第一个元素大于第二个元素，就进行交换
				{ 
					swap((char*)base + j * width, (char*)base + (j + 1) * width,width);  // 交换函数
				}
			}
		}
	}
}
void print(int arr[10], int sz)  //打印函数，也需要用户根据自己所需要进行排序的元素类型来进行书写
{ 
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
}
void test()           // 进行数组元素的排序
{
	int arr[10] = { 9,8,7,6,5,4,3,2,1 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	int width = sizeof(arr[0]);
	my_qsort(arr, sz, width, sort);
	print(arr, sz);
}

int main()
{
	test();
	return 0;
}
